<library>
	<!--
			========== Credits ==========
			AESCryptLz is developed by
				Mario Koenig
				Mario.Koenig@t-online.de
				http://www.synie.net/
				Licence: GPL
			Class: "aes" - The used AES algorithm is developed by
				Eugene Styer
				Eugene.Styer@eku.edu
				http://people.eku.edu/styere/
				Licence: GPL
			Class: "md5" - The used MD5 algorithm is developed by
				Paul Johnston
				http://pajhome.org.uk/crypt/md5
				Licence: BSD
			Class: "md5" - The used MD5 class is developed by
				userfriendly
				http://forum.openlaszlo.org/showthread.php?t=2630&highlight=md5
				Licence: BSD ?

			========== What!? ==========
			This little compilation of some classes can be used to do a AES encryption inside
			an OpenLaszlo application. The base class is called "AESCryptLz" and makes use of
			an AES encryption class and an MD5 class. It can create an MD5 hash (to use pass-
			words) to use them as an AES key. Also it cuts down the string, which needs to be
			encrypted, encrypt them via AES and give back an hex string, that can be decrypted
			by any other profram. It does the same thing with a string, that needs to be de-
			crypted, but it gives back a full string.
			The AES key needs to be a 128 bit Hex string (i.e. "0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
			0f"), or an ASCII password. A short reference:
			Init:
			foo = new AESCryptLz();
			Usage:
			foo.encryptByAscii (tobeencrypted : String,     theasciikey : String);     : returns Hex-String
			foo.encryptByHex   (tobeencrypted : String,     thehexkey   : Hex-String); : returns Hex-String
			foo.decryptByAscii (tobedecrypted : Hex-String, theasciikey : String);     : returns String
			foo.decryptByHex   (tobedecrypted : Hex-String, thehexkey   : Hex-String); : returns String
			foo.getUsedKey     ();                                                     : returns Hex-String
			With Hex-String, I mean a ordinary string containing Hex digits.

			========== Misc ==========
			I havent compiled those classes together, because I don't want to mix the code of
			different programmers in a Library in such an early state. So if there are any
			problems with the code, it can be located easier.

			========== Feel Free ==========
			The used AES class is just a port of a JavaScript and I also havent reviewed both
			used classes that much. So there may be some methods, that aren't used at the mo-
			ment. So feel free to review the code, make changes, etc. If you did some usefull
			modifications, please contact me. So I can update the version, I provide for you.
			Also feel free to correct my typos ;-)
		  -->

	<class name="AESCryptLz" extends="node">

		<!--
				References to the used AES and MD5 class
			  -->
		<attribute name="pmd5" type="expression" value="null" />
		<attribute name="paes" type="expression" value="null" />

		<!--
				The Hex-String containing the used key for the en- / decryption.
				If you used a ASCII password to en- / decrypt a string, this attribute will
				contain the used 128-Bit Hex key (MD5 of password). Otherwise it contains your
				given Hex key
			  -->
		<attribute name="usedKey" type="string" value="" />

		<!--
				Init AES and MD5
			  -->
		<handler name="oninit">
			this.pmd5 = new lz.md5();
			this.paes = new lz.aes();
		</handler>

		<!--
				getUsedKey()
				By calling this method, you'll get the used HEX key for en- / decryption. This
				is usefull, if you encrypted a string with an ASCII key - so you can get to know
				which HEX key you have to use to decrypt.
			  -->
		<method name="getUsedKey">

			// Something wrong?
			if (!this.usedKey)
				return false;

			return this.usedKey;
		</method>

		<!--
				encryptByAscii(str,key)
				Used to encrypt 'str' by the ASCII key 'key'. To do so, the given password is
				converted to a MD5 hash and used as the 128-Bit Hex key. You can get this key
				by calling getUsedKey().
			  -->
		<method name="encryptByAscii" args="str,key">

			// Something wrong?
			if (!str)
				return false;
			if (!key)
				return false;

			// Generate MD5 out of the password
			var md5Key = pmd5.hex_md5(key);

			// Store the generated key
			this.setAttribute("usedKey", md5Key);

			// Cut down the string and encrypt it:
			var encStr = this.encrypt(str, md5Key);

			// Something wrong?
			if (!encStr)
				return false;

			// done
			return encStr;
		</method>

		<!--
				encryptByHex(str,key)
				Used to encrypt 'str' by the HEX key 'key'. To do so, the given key needs to
				be a 128-Bit Hex key.
			  -->
		<method name="encryptByHex" args="str,key">

			// Something wrong?
			if (!str)
				return false;
			if (!key)
				return false;

			// Store the generated key
			this.setAttribute("usedKey", key);

			// Cut down the string and encrypt it:
			var encStr = this.encrypt(str, key);

			// Something wrong?
			if (!encStr)
				return false;

			// done
			return encStr;
		</method>

		<!--
				decryptByAscii(str,key)
				Used to decrypt 'str' by the ASCII key 'key'. To do so, the given password is
				converted to a MD5 hash and used as the 128-Bit Hex key. You can get this key
				by calling getUsedKey().
			  -->
		<method name="decryptByAscii" args="str,key">

			// Something wrong?
			if (!str)
				return false;
			if (!key)
				return false;

			// Generate MD5 out of the password
			var md5Key = pmd5.hex_md5(key);

			// Store the generated key
			this.setAttribute("usedKey", md5Key);

			// Cut down the string and decrypt it:
			var encStr = this.decrypt(str, md5Key);

			// Something wrong?
			if (!encStr)
				return false;

			// done
			return encStr;
		</method>

		<!--
				decryptByHex(str,key)
				Used to decrypt 'str' by the HEX key 'key'. To do so, the given key is needs
				to be a 128-Bit Hex key.
			  -->
		<method name="decryptByHex" args="str,key">

			// Something wrong?
			if (!str)
				return false;
			if (!key)
				return false;

			// Store the generated key
			this.setAttribute("usedKey", key);

			// Cut down the string and decrypt it:
			var encStr = this.decrypt(str, key);

			// Something wrong?
			if (!encStr)
				return false;

			// done
			return encStr;
		</method>

		<!--
				Internal use only. just need to call those other methods, mentioned above.
				This method is used to cut down the string to 128 bit packages, encrypt it
				and give it back.
			  -->
		<method name="encrypt" args="str, key">
		<![CDATA[
			var tmp = str;
			var enc = "";

			while (tmp.length > 0) {
				// Every string, that is encoded with AES needs to be 128 bits or 16
				// ASCII characters. So lets cut the whole string down.
				var tmpenc = tmp.substr(0, 16)
				tmp = tmp.substr(16, tmp.length - 16);

				// if tmpenc is smaller than 16, fill it with 0x10
				//while (tmpenc.length < 16)
				//{
				//    tmpenc += String.fromCharCode("0x00");
				//}

				// encrypt
				tmpenc = paes.aes_encrypt(tmpenc, key);
				if (enc.length > 0)
					enc += " "
				enc += tmpenc;
			}

			return enc;
		]]>
		</method>

		<!--
				Internal use only. just need to call those other methods, mentioned above.
				This method is used to cut down the hex string to 128 bit packages, decrypt it
				and give it back.
			  -->
		<method name="decrypt" args="str, key">
		<![CDATA[
			var tmp = paes.remove_spaces(str);
			var enc = "";

			while (tmp.length > 0) {
				// Every string, that is encoded with AES needs to be 128 bits or 32
				// HEX digits. So lets cut the whole string down.
				var tmpenc = tmp.substr(0, 32)
				tmp = tmp.substr(32, tmp.length - 32);

				// encrypt
				tmpenc = paes.aes_decrypt(tmpenc, key);
				enc += tmpenc;
			}

			return enc;
		]]>
		</method>
	</class>

	<!--
			A Lz port of the JavaScript from
			Eugene Styer
			Eugene.Styer@eku.edu
			http://people.eku.edu/styere/
		  -->
	<class name="aes" extends="node">

		<!--
				accumulate values to put into text area
			  -->
		<attribute name="accumulated_output_info" />

		<!--
				add a labeled value to the text area
			  -->
		<method name="accumulate_output" args="str">
			this.accumulated_output_info = this.accumulated_output_info + str + "\n";
		</method>

		<!--
				convert a 8-bit value to a string
			  -->
		<method name="cvt_hex8" args="val">
		<![CDATA[
			var vh = (val >>> 4) & 0x0f;
			return vh.toString(16) + (val & 0x0f).toString(16);
		]]>
		</method>

		<!--
				S-Box substitution table
			  -->
		<attribute name="S_enc" />

		<!--
				inverse S-Box for decryptions
			-->
		<attribute name="S_dec" />

		<!--
				convert two-dimensional indicies to one-dim array indices
			  -->
		<attribute name="I00" type="number" value="0" />
		<attribute name="I01" type="number" value="1" />
		<attribute name="I02" type="number" value="2" />
		<attribute name="I03" type="number" value="3" />
		<attribute name="I10" type="number" value="4" />
		<attribute name="I11" type="number" value="5" />
		<attribute name="I12" type="number" value="6" />
		<attribute name="I13" type="number" value="7" />
		<attribute name="I20" type="number" value="8" />
		<attribute name="I21" type="number" value="9" />
		<attribute name="I22" type="number" value="10" />
		<attribute name="I23" type="number" value="11" />
		<attribute name="I30" type="number" value="12" />
		<attribute name="I31" type="number" value="13" />
		<attribute name="I32" type="number" value="14" />
		<attribute name="I33" type="number" value="15" />

		<!--
				final AES state
			  -->
		<attribute name="AES_output" />

		<!--
				Oninit
			  -->
		<handler name="oninit">
			this.S_enc = new Array(0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f,
					0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca,
					0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2,
					0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36,
					0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,
					0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07,
					0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c,
					0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
					0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1,
					0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0,
					0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02,
					0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92,
					0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,
					0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4,
					0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f,
					0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde,
					0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24,
					0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7,
					0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
					0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c,
					0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,
					0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61,
					0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98,
					0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce,
					0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
					0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16);

			this.S_dec = new Array(0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5,
					0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c,
					0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43,
					0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6,
					0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3,
					0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76,
					0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6,
					0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
					0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9,
					0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90,
					0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58,
					0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca,
					0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a,
					0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97,
					0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74,
					0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c,
					0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5,
					0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc,
					0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
					0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88,
					0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec,
					0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d,
					0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b,
					0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83,
					0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,
					0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d);

			this.AES_output = new Array(16);
		</handler>

		<!--
				convert a 32-bit value to a 8-char hex string
			  -->
		<method name="cvt_hex32" args="val">
		<![CDATA[
			var str = "";
			var i;
			var v;

			for (i = 7; i >= 0; i--) {
				v = (val >>> (i * 4)) & 0x0f;
				str += v.toString(16);
			}
			return str;
		]]>
		</method>

		<!--
				convert a two-digit hex value to a number
			  -->
		<method name="cvt_byte" args="str">
		<![CDATA[

			// get the first hex digit
			var val1 = str.charCodeAt(0);

			// do some error checking
			if (val1 >= 48 && val1 <= 57)
				// have a valid digit 0-9
				val1 -= 48;
			else if (val1 >= 65 && val1 <= 70)
				// have a valid digit A-F
				val1 -= 55;
			else if (val1 >= 97 && val1 <= 102)
				// have a valid digit A-F
				val1 -= 87;
			else {
				// not 0-9 or A-F, complain
				Debug.write(str.charAt(1) + " is not a valid hex digit");
				return -1;
			}

			// get the second hex digit
			var val2 = str.charCodeAt(1);

			// do some error checking
			if (val2 >= 48 && val2 <= 57)
				// have a valid digit 0-9
				val2 -= 48;
			else if (val2 >= 65 && val2 <= 70)
				// have a valid digit A-F
				val2 -= 55;
			else if (val2 >= 97 && val2 <= 102)
				// have a valid digit A-F
				val2 -= 87;
			else {
				// not 0-9 or A-F, complain
				Debug.write(str.charAt(2) + " is not a valid hex digit");
				return -1;
			}

			// all is ok, return the value
			return val1 * 16 + val2;
		]]>
		</method>

		<!--
				add a byte to the output
			  -->
		<method name="accumulate_byte" args="label,val">
			this.accumulated_output_info += label + cvt_hex8(val) + "\n";
		</method>

		<!--
				add a word to the output
			  -->
		<method name="accumulate_wordarray" args="label,ary">
		<![CDATA[
			var i, j;
			this.accumulated_output_info += label + " ";

			// process the four elements in this word
			for (j = 0; j < 4; j++)
				this.accumulated_output_info += " " + cvt_hex8(ary[j]);

			// mark the end of the word
			this.accumulated_output_info += "\n";
		]]>
		</method>

		<!--
				add an array to the output
			  -->
		<method name="accumulate_array" args="label,ary">
		<![CDATA[
			var i, j;
			var spacer = "";

			// build a set of spaces of equal length to the label
			while (spacer.length < label.length)
				spacer += " ";

			// build the table
			for (i = 0; i < 16; i += 4) {
				// add label/spaces
				if (i == 0)
					this.accumulated_output_info += label + " ";
				else
					this.accumulated_output_info += spacer + " ";

				// process the four elements in this "row"
				for (j = 0; j < 4; j++)
					this.accumulated_output_info += " " + cvt_hex8(ary[i + j]);

				// mark the end of this row
				this.accumulated_output_info += "\n";
			}
		]]>
		</method>

		<!--
				conversion function for non-constant subscripts
				assume subscript range 0..3
			  -->
		<method name="I" args="x,y">
			return (x * 4) + y;
		</method>

		<!--
				remove spaces from input
			  -->
		<method name="remove_spaces" args="instr">
		<![CDATA[
			var i;
			var outstr = "";

			for (i = 0; i < instr.length; i++)
				if (instr.charAt(i) != " ")
					// not a space, include it
					outstr += instr.charAt(i);

			return outstr;
		]]>
		</method>

		<!--
				get the message to encrypt/decrypt or the key
				return as a 16-byte array
			  -->
		<method name="get_value" args="lbl,str,isASCII">
		<![CDATA[
			var dbyte = new Array(16);
			var i;
			var val; // one hex digit

			if (isASCII) {
				// CHANGES for AESCryptLz:
				// Commented out the check for the length of the string. If it's smaller than 16, it's filled
				// with "".
				// ??? pad with spaces/nulls if < 16 chars ???
				// check length of data
				//if ( str.length != 16 )
				//{
				//    Debug.write( lbl + " length wrong: Is " + str.length +
				//                     "characters, but must be 128 bits (16 ASCII characters)");
				//    dbyte[0] = -1;
				//    return dbyte;
				//}

				// have ASCII data
				for (i = 0; i < 16; i++) {
					if (str.charCodeAt(i))
						dbyte[i] = str.charCodeAt(i);
					else
						dbyte[i] = "";
				}
			} else {
				// have hex data - remove any spaces they used, then convert
				str = remove_spaces(str);

				// CHANGES for AESCryptLz:
				// Commented out the check for the length of the string. If it's smaller than 32, it's filled
				// with 0x00.
				// check length of data
				//if ( str.length != 32 )
				//{
				//    Debug.write( lbl + " length wrong: Is " + str.length +
				//                     " hex digits, but must be 128 bits (32 hex digits)");
				//    dbyte[0] = -1;
				//    return dbyte;
				//}

				for (i = 0; i < 16; i++) {
					// isolate and convert this substring
					if (cvt_byte(str.substr(i * 2, 2)))
						dbyte[i] = cvt_byte(str.substr(i * 2, 2));
					else
						dbyte[i] = cvt_byte("00");
					if (dbyte[i] < 0) {
						// have an error
						dbyte[0] = -1;
						return dbyte;
					}
				} // for i
			} // if isASCII

			// return successful conversion
			return dbyte;
		]]>
		</method>

		<!--
				do the AES GF(2**8) multiplication
				do this by the shift-and-"add" approach
			  -->
		<method name="aes_mul" args="a,b">
		<![CDATA[
			var res = 0;

			while (a > 0) {
				if (a & 1)
					res = res ^ b; // "add" to the result
				a >>>= 1; // shift a to get next higher-order bit
				b <<= 1; // shift multiplier also
			}

			// now reduce it modulo x**8 + x**4 + x**3 + x + 1
			var hbit = 0x10000; // bit to test if we need to take action
			var modulus = 0x11b00; // modulus - XOR by this to change value
			while (hbit >= 0x100) {
				if (res & hbit) // if the high-order bit is set
					res ^= modulus; // XOR with the modulus

				// prepare for the next loop
				hbit >>= 1;
				modulus >>= 1;
			}

			return res;
		]]>
		</method>

		<!--
				apply the S-box substitution to the key expansion
			  -->
		<method name="SubWord" args="word_ary">
		<![CDATA[
			var i;

			for (i = 0; i < 16; i++) {
				if (word_ary[i])
					word_ary[i] = S_enc[word_ary[i]];
			}

			return word_ary;
		]]>
		</method>

		<!--
				// rotate the bytes in a word
			  -->
		<method name="RotWord" args="word_ary">
			return new Array(word_ary[1], word_ary[2], word_ary[3], word_ary[0]);
		</method>

		<!--
				calculate the first item Rcon[i] = { x^(i-1), 0, 0, 0 }
				note we only return the first item
			  -->
		<method name="Rcon" args="exp">
		<![CDATA[
			var val = 2;
			var result = 1;

			// remember to calculate x^(exp-1)
			exp--;

			// process the exponent using normal shift and multiply
			while (exp > 0) {
				if (exp & 1)
					result = aes_mul(result, val);

				// square the value
				val = aes_mul(val, val);

				// move to the next bit
				exp >>= 1;
			}

			return result;
		]]>
		</method>

		<!--
				round key generation
				return a byte array with the expanded key information
			  -->
		<method name="key_expand" args="key">
		<![CDATA[
			var temp = new Array(4);
			var i, j;
			var w = new Array(4 * 11);

			// copy initial key stuff
			for (i = 0; i < 16; i++) {
				w[i] = key[i];
			}
			accumulate_wordarray("w[0] = ", w.slice(0, 4));
			accumulate_wordarray("w[1] = ", w.slice(4, 8));
			accumulate_wordarray("w[2] = ", w.slice(8, 12));
			accumulate_wordarray("w[3] = ", w.slice(12, 16));

			// generate rest of key schedule using 32-bit words
			i = 4;
			while (i < 44) // blocksize * ( rounds + 1 )
			{
				// copy word W[i-1] to temp
				for (j = 0; j < 4; j++)
					temp[j] = w[(i - 1) * 4 + j];

				if (i % 4 == 0) {
					// temp = SubWord(RotWord(temp)) ^ Rcon[i/4];
					temp = RotWord(temp);
					accumulate_wordarray("RotWord()=", temp);
					temp = SubWord(temp);
					accumulate_wordarray("SubWord()=", temp);
					temp[0] ^= Rcon(i >>> 2);
					accumulate_wordarray(" ^ Rcon()=", temp);
				}

				// word = word ^ temp
				for (j = 0; j < 4; j++)
					w[i * 4 + j] = w[(i - 4) * 4 + j] ^ temp[j];
				accumulate_wordarray("w[" + i + "] = ", w.slice(i * 4, i * 4
										+ 4));

				i++;
			}

			return w;
		]]>
		</method>

		<!--
				do S-Box substitution
			  -->
		<method name="SubBytes" args="state,Sbox">
		<![CDATA[
			var i;

			for (i = 0; i < 16; i++)
				state[i] = Sbox[state[i]];

			return state;
		]]>
		</method>

		<!--
				shift each row as appropriate
			  -->
		<method name="ShiftRows" args="state">
			var t0, t1, t2, t3;

			// top row (row 0) isn't shifted

			// next row (row 1) rotated left 1 place
			t0 = state[I10];
			t1 = state[I11];
			t2 = state[I12];
			t3 = state[I13];
			state[I10] = t1;
			state[I11] = t2;
			state[I12] = t3;
			state[I13] = t0;

			// next row (row 2) rotated left 2 places
			t0 = state[I20];
			t1 = state[I21];
			t2 = state[I22];
			t3 = state[I23];
			state[I20] = t2;
			state[I21] = t3;
			state[I22] = t0;
			state[I23] = t1;

			// bottom row (row 3) rotated left 3 places
			t0 = state[I30];
			t1 = state[I31];
			t2 = state[I32];
			t3 = state[I33];
			state[I30] = t3;
			state[I31] = t0;
			state[I32] = t1;
			state[I33] = t2;

			return state;
		</method>

		<!--
				inverset shift each row as appropriate
			  -->
		<method name="InvShiftRows" args="state">
			var t0, t1, t2, t3;

			// top row (row 0) isn't shifted

			// next row (row 1) rotated left 1 place
			t0 = state[I10];
			t1 = state[I11];
			t2 = state[I12];
			t3 = state[I13];
			state[I10] = t3;
			state[I11] = t0;
			state[I12] = t1;
			state[I13] = t2;

			// next row (row 2) rotated left 2 places
			t0 = state[I20];
			t1 = state[I21];
			t2 = state[I22];
			t3 = state[I23];
			state[I20] = t2;
			state[I21] = t3;
			state[I22] = t0;
			state[I23] = t1;

			// bottom row (row 3) rotated left 3 places
			t0 = state[I30];
			t1 = state[I31];
			t2 = state[I32];
			t3 = state[I33];
			state[I30] = t1;
			state[I31] = t2;
			state[I32] = t3;
			state[I33] = t0;

			return state;
		</method>

		<!--
				process column info
			  -->
		<method name="MixColumns" args="state">
		<![CDATA[
			var col;
			var c0, c1, c2, c3;

			for (col = 0; col < 4; col++) {
				c0 = state[I(0, col)];
				c1 = state[I(1, col)];
				c2 = state[I(2, col)];
				c3 = state[I(3, col)];

				// do mixing, and put back into array
				state[I(0, col)] = aes_mul(2, c0) ^ aes_mul(3, c1) ^ c2 ^ c3;
				state[I(1, col)] = c0 ^ aes_mul(2, c1) ^ aes_mul(3, c2) ^ c3;
				state[I(2, col)] = c0 ^ c1 ^ aes_mul(2, c2) ^ aes_mul(3, c3);
				state[I(3, col)] = aes_mul(3, c0) ^ c1 ^ c2 ^ aes_mul(2, c3);
			}

			return state;
		]]>
		</method>

		<!--
				inverse process column info
			  -->
		<method name="InvMixColumns" args="state">
		<![CDATA[
			var col;
			var c0, c1, c2, c3;

			for (col = 0; col < 4; col++) {
				c0 = state[I(0, col)];
				c1 = state[I(1, col)];
				c2 = state[I(2, col)];
				c3 = state[I(3, col)];

				// do inverse mixing, and put back into array
				state[I(0, col)] = aes_mul(0x0e, c0) ^ aes_mul(0x0b, c1)
						^ aes_mul(0x0d, c2) ^ aes_mul(0x09, c3);
				state[I(1, col)] = aes_mul(0x09, c0) ^ aes_mul(0x0e, c1)
						^ aes_mul(0x0b, c2) ^ aes_mul(0x0d, c3);
				state[I(2, col)] = aes_mul(0x0d, c0) ^ aes_mul(0x09, c1)
						^ aes_mul(0x0e, c2) ^ aes_mul(0x0b, c3);
				state[I(3, col)] = aes_mul(0x0b, c0) ^ aes_mul(0x0d, c1)
						^ aes_mul(0x09, c2) ^ aes_mul(0x0e, c3);
			}

			return state;
		]]>
		</method>

		<!--
				insert subkey information
			  -->
		<method name="AddRoundKey" args="state,w,base">
		<![CDATA[
			var col;

			for (col = 0; col < 4; col++) {
				state[I(0, col)] ^= w[base + col * 4];
				state[I(1, col)] ^= w[base + col * 4 + 1];
				state[I(2, col)] ^= w[base + col * 4 + 2];
				state[I(3, col)] ^= w[base + col * 4 + 3];
			}

			return state;
		]]>
		</method>

		<!--
				return a transposed array
			  -->
		<method name="transpose" args="msg">
		<![CDATA[
			var row, col;
			var state = new Array(16);

			for (row = 0; row < 4; row++)
				for (col = 0; col < 4; col++)
					state[I(row, col)] = msg[I(col, row)];

			return state;
		]]>
		</method>

		<!--
				// format AES output
				// uses the global array DES_output
			  -->
		<method name="format_AES_output" args="isAscii">
		<![CDATA[
			var i;
			var bits;
			var str = "";

			// what type of data do we have to work with?
			if (isAscii) {
				// convert each set of bits back to ASCII
				for (i = 0; i < 16; i++)
					str += String.fromCharCode(AES_output[i]);
			} else {
				// output hexdecimal data (insert spaces)
				str = cvt_hex8(AES_output[0]);
				for (i = 1; i < 16; i++) {
					str += " " + cvt_hex8(AES_output[i]);
				}
			}

			// copy to textbox
			//Debug.write(str);
			return str;
		]]>
		</method>

		<!--
				// do encrytion
			  -->
		<method name="aes_encrypt" args="toCry, keyCry">
		<![CDATA[
			var w = new Array(44); // subkey information
			var state = new Array(16); // working state
			var round;

			this.accumulated_output_info = "";

			// get the message from the user
			// also check if it is ASCII or hex
			var msg = get_value("Message", toCry, true);

			// problems??
			if (msg[0] < 0) {
				//Debug.write(accumulated_output_info);
				return;
			}
			accumulate_array("Input bits", msg);

			// get the key from the user
			var key = get_value("Key", keyCry, false);
			// problems??
			if (key[0] < 0) {
				//Debug.write(accumulated_output_info);
				return;
			}
			accumulate_array("Key bits", key);

			// expand the key
			w = key_expand(key);

			// initial state = message in columns (transposed from what we input)
			state = transpose(msg);

			accumulate_array("Initial state", state);
			// display the round key - Transpose due to the way it is stored/used
			accumulate_array("Round Key", transpose(w.slice(0, 16)));
			state = AddRoundKey(state, w, 0);

			for (round = 1; round < 10; round++) {
				accumulate_array("Round " + round, state);
				state = SubBytes(state, S_enc);
				accumulate_array("After SubBytes", state);
				state = ShiftRows(state);
				accumulate_array("After ShiftRows", state);
				state = MixColumns(state);
				accumulate_array("After MixColumns", state);
				// display the round key - Transpose due to the way it is stored/used
				accumulate_array("Round Key", transpose(w.slice(round * 4 * 4,
								round * 16 + 16)));
				// note here the spec uses 32-bit words, we are using bytes, so an extra *4
				state = AddRoundKey(state, w, round * 4 * 4);
			}

			SubBytes(state, S_enc);
			accumulate_array("After SubBytes", state);
			ShiftRows(state);
			accumulate_array("After ShiftRows", state);
			AddRoundKey(state, w, 10 * 4 * 4);
			accumulate_array("Output", state);

			// process output
			AES_output = transpose(state);
			return format_AES_output(false);
			//Debug.write(accumulated_output_info);
		]]>
		</method>

		<!--
				do decryption
			  -->
		<method name="aes_decrypt" args="toCry,keyCry">
		<![CDATA[
			var w = new Array(44); // subkey information
			var state = new Array(16); // working state
			var round;

			this.accumulated_output_info = "";

			// get the message from the user
			// also check if it is ASCII or hex
			var msg = get_value("Message", toCry, false);

			// problems??
			if (msg[0] < 0) {
				//Debug.write(accumulated_output_info);
				return;
			}
			accumulate_array("Input bits", msg);

			// get the key from the user
			var key = get_value("Key", keyCry, false);
			// problems??
			if (key[0] < 0) {
				//Debug.write(accumulated_output_info);
				return;
			}
			accumulate_array("Key bits", key);

			// expand the key
			w = key_expand(key);

			// initial state = message
			state = transpose(msg);

			accumulate_array("Initial state", state);
			// display the round key - Transpose due to the way it is stored/used
			accumulate_array("Round Key", transpose(w.slice(10 * 4 * 4, 10 * 4
									* 4 + 16)));
			state = AddRoundKey(state, w, 10 * 4 * 4);

			for (round = 9; round >= 1; round--) {
				accumulate_array("Round " + round, state);
				state = InvShiftRows(state);
				accumulate_array("After InvShiftRows", state);
				state = SubBytes(state, S_dec);
				accumulate_array("After SubBytes", state);
				// display the round key - Transpose due to the way it is stored/used
				accumulate_array("Round Key", transpose(w.slice(round * 4 * 4,
								round * 16 + 16)));
				// note here the spec uses 32-bit words, we are using bytes, so an extra *4
				state = AddRoundKey(state, w, round * 4 * 4);
				accumulate_array("After AddRoundKey", state);
				state = InvMixColumns(state);
			}

			InvShiftRows(state);
			accumulate_array("After InvShiftRows", state);
			SubBytes(state, S_dec);
			accumulate_array("After SubBytes", state);
			AddRoundKey(state, w, 0);
			accumulate_array("Output", state);

			// process output
			AES_output = transpose(state);
			return format_AES_output(true);
			//Debug.write(accumulated_output_info);
		]]>
		</method>
	</class>
	

	<!--
			LZX-Implementierung einer MD5-Verschluesselung
			Basiert auf md5.js von Paul Johnston (s.u.)

			"A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
			Digest Algorithm, as defined in RFC 1321.
			Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
			Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
			Distributed under the BSD License
			See http://pajhome.org.uk/crypt/md5 for more info."
		  -->
	<class name="md5">

		<!--
				Configurable variables. You may need to tweak these to be compatible with
				the server-side, but the defaults work in most cases.
			  -->
		<!-- hex output format. 0 = lowercase; 1 = uppercase -->
		<attribute name="hexcase" value="0" />

		<!-- bits per input character. 8 = ASCII; 16 = Unicode -->
		<attribute name="chrsz" value="8" />

		<!--
				These are the functions you'll usually want to call
				They take string arguments and return either hex or base-64 encoded strings
			  -->
		<method name="hex_md5" args="s">
			return binl2hex(core_md5(str2binl(s), s.length * chrsz));
		</method>

		<!--
				Calculate the MD5 of an array of little-endian words, and a bit length
			  -->
		<method name="core_md5" args="x,len">
		<![CDATA[
			x[len >> 5] |= 0x80 << ((len) % 32);
			x[(((len + 64) >>> 9) << 4) + 14] = len;

			var a = 1732584193;
			var b = -271733879;
			var c = -1732584194;
			var d = 271733878;

			for (var i = 0; i < x.length; i += 16) {
				var olda = a;
				var oldb = b;
				var oldc = c;
				var oldd = d;

				a = this.md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
				d = this.md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
				c = this.md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
				b = this.md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
				a = this.md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
				d = this.md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
				c = this.md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
				b = this.md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
				a = this.md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
				d = this.md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
				c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
				b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
				a = this.md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
				d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
				c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
				b = this.md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

				a = this.md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
				d = this.md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
				c = this.md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
				b = this.md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
				a = this.md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
				d = this.md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
				c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
				b = this.md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
				a = this.md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
				d = this.md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
				c = this.md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
				b = this.md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
				a = this.md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
				d = this.md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
				c = this.md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
				b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

				a = this.md5_hh(a, b, c, d, x[i + 5], 4, -378558);
				d = this.md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
				c = this.md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
				b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
				a = this.md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
				d = this.md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
				c = this.md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
				b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
				a = this.md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
				d = this.md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
				c = this.md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
				b = this.md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
				a = this.md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
				d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
				c = this.md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
				b = this.md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

				a = this.md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
				d = this.md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
				c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
				b = this.md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
				a = this.md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
				d = this.md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
				c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
				b = this.md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
				a = this.md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
				d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
				c = this.md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
				b = this.md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
				a = this.md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
				d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
				c = this.md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
				b = this.md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

				a = this.safe_add(a, olda);
				b = this.safe_add(b, oldb);
				c = this.safe_add(c, oldc);
				d = this.safe_add(d, oldd);
			}
			return Array(a, b, c, d);
		]]>
		</method>

		<!--
				These functions implement the four basic operations the algorithm uses.
			  -->
		<method name="md5_cmn" args="q,a,b,x,s,t">
			return this.safe_add(this.bit_rol(this.safe_add(
									this.safe_add(a, q), this.safe_add(x, t)),
							s), b);
		</method>
		<method name="md5_ff" args="a,b,c,d,x,s,t">
		<![CDATA[
			return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
		]]>
		</method>
		<method name="md5_gg" args="a,b,c,d,x,s,t">
		<![CDATA[
			return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
		]]>
		</method>
		<method name="md5_hh" args="a,b,c,d,x,s,t">
			return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
		</method>
		<method name="md5_ii" args="a,b,c,d,x,s,t">
			return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
		</method>

		<!--
				Add integers, wrapping at 2^32. This uses 16-bit operations internally
				to work around bugs in some JS interpreters.
			  -->
		<method name="safe_add" args="x,y">
		<![CDATA[
			var lsw = (x & 0xFFFF) + (y & 0xFFFF);
			var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
			return (msw << 16) | (lsw & 0xFFFF);
		]]>
		</method>

		<!--
				Bitwise rotate a 32-bit number to the left.
			  -->
		<method name="bit_rol" args="num,cnt">
		<![CDATA[
			return (num << cnt) | (num >>> (32 - cnt));
		]]>
		</method>

		<!--
				Convert a string to an array of little-endian words
				If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
			  -->
		<method name="str2binl" args="str">
		<![CDATA[
			var bin = Array();
			var mask = (1 << chrsz) - 1;
			for (var i = 0; i < str.length * chrsz; i += chrsz)
				bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
			return bin;
		]]>
		</method>

		<!--
				Convert an array of little-endian words to a hex string.
			  -->
		<method name="binl2hex" args="binarray">
		<![CDATA[
			var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
			var str = "";
			for (var i = 0; i < binarray.length * 4; i++) {
				str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4))
						& 0xF)
						+ hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8))
								& 0xF);
			}
			Debug.write(str);
			return str;
		]]>
		</method>
	</class>

</library>
