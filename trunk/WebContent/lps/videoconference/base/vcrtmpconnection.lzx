<library>
	
	<class name="vcrtmpconnection" extends="rtmpconnection">
		
		<attribute name="src" value="" type="string"/>
		<attribute name="autoconnect" value="false" type="boolean" />
		<attribute name="soMessage" value="" type="string"/>
		
		<attribute name="useSO" value="false" type="boolean"/>
		
		<event name="onconnect"/>
		<event name="onerror"/>
		<event name="onsosync"/>
		
		<method name="connect" args="params">
			this._nc = new NetConnection();
			// local reference to rtmpconnection
			this._nc.t = this;

			if (params == null) {
				this._nc.connect(src == "null" ? null : src);
			} else {
				this._nc.connect(src == "null" ? null : src, params);
			}

			this._nc.onStatus = function(info) {
				this.t._onStatus(info);
			}

			this.registerMethods();
		</method>
		
		<method name="initShareObject" args="soName">


			if (this.useSO) {
				this._sharedObject = SharedObject.getRemote(soName,
						this._nc.uri, false);
				this._sharedObject.connect(this._nc);

				this._sharedObject.messageHandler = function(str) {
					soMessage = str;
					onsosync.sendEvent();
				};

			}
		</method>
		
		<method name="getData" args="key">
			if (this._sharedObject.data["key"] == undefined) {
				return null;
			} else {
				return this._sharedObject.data["key"];
			}
		</method>
	
		<method name="setData" args="key,val">
			this._sharedObject.data["key"] = val;
		</method>
		
		<method name="_onStatus" args="info"><![CDATA[
			if (this.debug) {
				Debug.write("vcrtmpconnection", this, "_onStatus", info.code);
			}

			var msg = "";

			switch (info.code) {
				case "NetConnection.Connect.Success" : {
					// The connection attempt succeeded.
					msg = info.code;
					s = 2;
					break;
				}
				default : {
					msg = info.code;
					s = 0;
					break;
				}
			}

			this.setAttribute("status", msg);

			if (s == 2) {
				this.onconnect.sendEvent();
			} else {
				this.onerror.sendEvent();
			}
		]]>
		</method>	
        
		<method name="disconnect">
			this._nc.close();
		</method>
        
		<method name="callRPC" args="func, obj, params">
			if (this.debug) Debug.write("*** call: func, obj, params",func,obj, typeof (params) ,params.length);
    	if (params.length != 0){
	    	//does this really work?
	    	ASSetPropFlags(_global, null, 8, 1);
	    	//Debug.write("does it work?",arguments);
			<!--
				this._nc.call.apply(this._nc,arguments);
				 -->
			if (params.length==1){
			    this._nc.call(func, obj,params[0]);
			} else if (params.length==2){
			    this._nc.call(func, obj,params[0],params[1]);
			} else if (params.length==3){
			    this._nc.call(func, obj,params[0],params[1],params[2]);
			} else if (params.length==4){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3]);
			} else if (params.length==5){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4]);
			} else if (params.length==6){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4],params[5]);
			} else if (params.length==7){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
			} else if (params.length==8){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4],params[5],params[6],params[7]);
			} else if (params.length==9){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4],params[5],params[6],params[7],params[8]);
			} else if (params.length==10){
			    this._nc.call(func, obj,params[0],params[1],params[2],params[3],params[4],params[5],params[6],params[7],params[8],params[9]);
			}
        } else {
            this._nc.call(func, obj);
        }
		</method>
		
		<method name="registerMethods">
		<![CDATA[
			if (this.subnodes != null) {
				//Register all methods which are instanceof serverCallBack
				for (var i = 0; i < this.subnodes.length; i++) {
					//If it is of Type serverCallBack then register it to the NetConnection
					if (this.subnodes[i] instanceof lz.servercallback) {
						Debug.write("Register method:"
								+ this.subnodes[i].funcname);
						//var t = hib;
						this._nc[this.subnodes[i].funcname] = function(args) {
							return remoteCallMethod(arguments.callee, arguments);
							//return hib.remoteCallMethod(arguments.callee,args);
						}
					}
				}
			}
		]]>
		</method>
    
		<!-- 
				Process the RemoteCall to the Right Funtion
				-swagner
			 -->
		<method name="remoteCallMethod" args="callee,args">
		<![CDATA[
			for (var eg in this._nc) {
				if (this._nc[eg] == callee) {
					if (args.length == 1) {
						return this.callFuntion(eg, args[0]);
					} else {
						return this.callFuntion(eg, args);
					}
				}
			}
		]]>
		</method>
    	
		<method name="callFuntion" args="funcname,args">
		<![CDATA[
			for (var i = 0; i < this.subnodes.length; i++) {
				if (this.subnodes[i].funcname == funcname) {
					Debug.write("call function:" + funcname + ":" + args);
					return this.subnodes[i].onResult(args);
				}
			}
		]]>
		</method>	
		
	</class>
	
	<class name="netremotecall" extends="node">
		
		<!--- Name of the remote function. -->
		<attribute name="funcname" value="$once{null}" type="string" />
    
		<attribute name="remotecontext" value="null" />
    
		<attribute name="dataobject" value="null" />
		
		<!--- Data handling event. args="value"  -->
		<event name="ondata" />

		<!--- Error handling event. -->
		<event name="onerror"/>
		
		<!--- Call the remote method, passing the array of params. -->
		<method name="callRPC" args="params" ><![CDATA[
			if (this.funcname == null) {
				//Debug.write("No funcname given");
				if (this.onerror)
					this.onerror.sendEvent("No funcname given");
				return;
			}

			if (params == null) {
				params = [];

				var subnodes = this.subnodes;
				if (subnodes != null) {
					var i;
					var n = subnodes.length;
					for (i = 0; i < n; i++) {
						// If getValue method is declared in param, call that
						// instead to get value.
						var tsi = subnodes[i];
						if ((tsi["getValue"] != null)
								&& (tsi.getValue["prototype"] != null)) {
							params[i] = tsi.getValue();
						} else {
							params[i] = tsi.value;
						}
					}
				}

			} else if (params.__proto__ != Array.prototype) {
				//Debug.write(this.name, "error: first argument (params) is not an array");
				return -1;
			}

			////Debug.write("call", this, this.parent, this.parent.status);
			var rtmpObject = null;
			if (this.parent instanceof lz.vcrtmpconnection) {
				rtmpObject = this.parent;
			} else if (this.remotecontext instanceof lz.vcrtmpconnection) {
				rtmpObject = this.remotecontext;
			} else {
				Debug.warn("ERROR: no remotecontext availible abort call");
			}

			if (rtmpObject.debug) {
				Debug
						.write('call', this, rtmpObject, params,
								rtmpObject.status);
			}
			rtmpObject.lastCalled = this;
			rtmpObject.callRPC(this.funcname, this, params);
		]]>
		</method>


		<!--- Handle the result returned from the remote method. -->
		<method name="onResult" args="value"><![CDATA[


			// Can be overriden.
			// Would be great if it can be used with dataobject,
			// but I don't know how to convert Array/primitive to LzDataset/LzDataPointer.
			////Debug.write("netremotecall", this, "onResult", value);
			if (this.dataobject != null) {
				if (this.dataobject instanceof LzDataset) {
					Debug.write("onResult: ", this, value, dataobject);
					var element = LzDataElement.valueToElement(value);
					this.dataobject.setData(element.childNodes);
				} else if (this.dataobject instanceof LzDataElement) {
					var element = LzDataElement.valueToElement(value);
					this.dataobject.appendChild(element);
				} else {
					Debug.warn(
							"dataobject is not LzDataset or LzDataElement: ",
							this, this.dataobject, delegate);
				}
			}
			this.ondata.sendEvent(value);
		]]>
		</method>
        
        
	</class>
	
	<class name="netparam" extends="node">
		<!--- The value of the netparam. -->
		<attribute name="value" value="null"/>
	</class>
	
	<class name="servercallback" extends="netremotecall"/>
    
</library>