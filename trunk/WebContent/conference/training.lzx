<canvas debug="true">
	
	<splash/>
	
	<script src="../js/json.js"/>
	
	<include href="../lps/videoconference/base/vcrtmpconnection.lzx"/>
	<include href="../lps/videoconference/base/userList.lzx"/>
	<include href="../lps/videoconference/base/sharedObject.lzx"/>
			
	<attribute name="messageSO" value="MessageSO" type="string"/>
	<attribute name="userListSO" value="UserListSO" type="string"/>
	<attribute name="userListUpdateSO" value="UserListUpdateSO" type="string"/>
	<attribute name="currentModerator" value="CurrentModerator" type="string"/>
	
	<attribute name="sid" value="" type="string"/>
	<attribute name="roomId" value="" type="string"/>
	<attribute name="userInfo"/>	
	
	<attribute name="status" value="0"/>
	
	<event name="onevent"/>
	
	<handler name="onevent" args="evt">
	<![CDATA[


		if (evt == "soInited") {
			canvas.setAttribute("status", canvas.status + 1);
		} else if (evt == "userInfoInited") {
			if (userInfo.userLevel != "User") {
				startConference.setAttribute("visible", true);
			}
		}

		Debug.write("Current status:" + canvas.status);
		if (canvas.status == 4) {
			Debug.write("All ok");
			//Add self into user list
			rc.getUserInfo.callRPC();
			canvas.setAttribute("status", -1);
		}
	]]>
	</handler>
	
	
	<sharedObject id="soUserListUpdate">
		<handler name="onStatus" args="evt">
			Debug.write("soUserListUpdate ===" + evt[0].code);
			if (evt[0].code == "clear") {
				parent.onevent.sendEvent("soInited");
			} else {
				Debug.write("Update userinfo");
				ul.updateListItem(this.getData("userInfo"));
			}
		</handler>
	</sharedObject>
	
	<sharedObject id="soUserList">
		<handler name="onStatus" args="evt">
			Debug.write("soUserList ===" + evt[0].code);
			if (evt[0].code == "clear") {
				parent.onevent.sendEvent("soInited");
				var userList = this.getData("userList");
				if (userList != null) {
					//Init user list
					ul.initList(userList);
				}
			} else {
				Debug.write("user list updated.");
			}
		</handler>
		<method name="joinUserList" args="userInfo">
		<![CDATA[
			var userList = null;
			if (this.getData("userList") != null) {
				userList = getData("userList");
				Debug.write("User list exist:" + userList.length);
			} else {
				Debug.write("User list is null create new one.");
				userList = new Array();
			}
			userList.push(userInfo);
			this.setData("userList", userList);
			soUserListUpdate.setData("userInfo", userInfo);
			Debug.write("User list size after update:" + userList.length);
			parent.onevent.sendEvent("userInfoInited");
		]]>
		</method>
	</sharedObject>
	
	<sharedObject id="soMessage">
		<handler name="onStatus" args="evt">
		<![CDATA[
			Debug.write("soMessage ===" + evt[0].code);
			if (evt[0].code == "clear") {
				parent.onevent.sendEvent("soInited");
			} else {
				rmessage.setAttribute("text", rmessage.text + "<br/>"
								+ this.getData("message"));
			}
		]]>
		</handler>
	</sharedObject>
	
	<sharedObject id="soCurrentModerator">
		<handler name="onStatus" args="evt">
			Debug.write("soCurrentModerator ===" + evt[0].code);
			if (evt[0].code == "clear") {
				parent.onevent.sendEvent("soInited");
			} else {
				var cm = this.getData("cm")
				Debug.write("cm is:" + cm);
				if (cm.userId != canvas.userInfo.userId) {
					Debug.write("Disable start button");
					startConference.setAttribute("visible", false);
					moderatorVideoView.setAttribute("visible", true);
					if (s2.playing) {
						s2.stop();
					} else {
						s2.setAttribute('url', canvas.roomId);
						s2.play();
					}
				} else {
					localVideoView.setAttribute("visible", true);
					if (cam.show) {
						Debug.write("pub stream stop");
						live.stream.stop();
						cam.setAttribute('show', false);
					} else {
						Debug.write("pub stream start");
						live.stream.broadcast();
						cam.setAttribute('show', true);
					}

				}
				conferenceMessage.setAttribute("text", "Moderator : "
								+ cm.userName);
			}
		</handler>
	</sharedObject>	

	<vcrtmpconnection id="rc" autoconnect="false">

		<handler name="onconnect">
			Debug.write("connected");
			soMessage.connect(canvas.messageSO, this._nc, false);
			soUserList.connect(canvas.userListSO, this._nc, false);
			soUserListUpdate.connect(canvas.userListUpdateSO, this._nc, false);
			soCurrentModerator
					.connect(canvas.currentModerator, this._nc, false);
		</handler>

		<handler name="onerror">
			Debug.write("error ", this.status);
		</handler>
		
		<netremotecall name="getUserInfo" funcname="conference.loadUserInfo">
			<attribute name="param1" value="${canvas.sid}" type="string" />      
			<netparam name="vars1">
				<method name="getValue">
					return parent.param1;
				</method>
			</netparam>  
			<method name="onResult" args="value">
				canvas.setAttribute("userInfo", JSON.parse(value));
				soUserList.joinUserList(canvas.userInfo);
			</method>  
		</netremotecall>
		
	</vcrtmpconnection>
		
	<mediastream name="s1" type="rtmp"/>
	<mediastream name="s2" type="rtmp"/>
	
	<script>
		canvas.setDefaultContextMenu(new LzContextMenu());
		function init(roomId, sid, url) {
			Debug.write(url + ":" + roomId + ":" + sid);
			canvas.setAttribute("sid", sid);
			canvas.setAttribute("roomId", roomId);

			var roomScope = url + "/" + roomId;
			rc.setAttribute("src", roomScope);
			rc.connect(sid);
			if (cam.show == false) {
				live.stream.setAttribute('url', roomId);
			}
		}
	</script>
	
	<!-- This is toolbar view-->
	<view x="0" y="0" width="100%" height="40" bgcolor="0xA3B2CC">
		<view x="1" y="1" width="${parent.width - 2}" height="${parent.height - 2}" bgcolor="white" layout="axis:x">
			<button id="startConference" text="Start Conference" align="left" height="16"  visible="false">
				<handler name="onclick">
				<![CDATA[
					if (canvas.userInfo.userLevel != "User") {
						if (cam.show) {
							this.setAttribute("text", "Start Conference");
						} else {
							this.setAttribute("text", "Stop Conference");
						}
						soCurrentModerator.setData("cm", canvas.userInfo);
					}
				]]>
				</handler>
			</button>
			<text id="conferenceMessage" visible="true"/>
				
		</view>
	</view>
	
	<!-- user list view -->
	<userlist id="ul" width="200" height="600" x="0" y="40"/>	
	
	<!-- Chat view -->
	<view width="100%" height="300" y="617" bgcolor="0xA3B2CC">
		<view name="chatContent" bgcolor="0xd2d2d2" width="${parent.width - 2}" height="123" clip="true" x="1" y="1">
			<text id="rmessage" multiline="true" width="100%"/>
			<vscrollbar/>
		</view>
		<view height="100%" width="${parent.width - 2}" x="1" y="124">
			<simplelayout axis="x"/>
			<edittext bgcolor="white" width="${parent.width - 50}" id="smessage"/>
			<button width="50" onclick="soMessage.setData('message',smessage.text);">Send</button>
		</view>
	</view>
		
	
	<!-- Display video stream window -->
	<window id="videoWindow" width="600" height="450" x="0" y="0" resizable="false" closeable="false" title="Moderator Video">
		
		<attribute name="maximized" value="true"/>

		<state name="big" applied="${videoWindow.maximized}">
			<animatorgroup duration="1000" process="simultaneous">
				<animator attribute="width" to="600"/>
				<animator attribute="height" to="450"/>
			</animatorgroup>
		</state>

		<state name="small" applied="${! videoWindow.maximized}">
			<animatorgroup duration="1000" process="simultaneous">
				<animator attribute="width" to="200"/>
				<animator attribute="height" to="150"/>
			</animatorgroup>
		</state>
     	
		<simplelayout axis="y"/>
     	
		<button text="Toggle" placement="title_area" align="right" height="16">
			<handler name="onclick">
				videoWindow.setAttribute('maximized', (!videoWindow.maximized));
			</handler>
		</button>
		
		<view id="moderatorVideoView" visible="false" width="100%" height="100%" bgcolor="green">
			<videoview name="vid" type="rtmp" stream="$once{canvas.s2}" width="100%" height="100%"/>
		</view>
     
		
		<view id="localVideoView" width="100%" height="100%" bgcolor="red" visible="false">
			<videoview id="live" type="rtmp" stream="$once{canvas.s1}" width="$once{parent.width}" height="$once{parent.height-40}" y="40">
				<camera id="cam" show="false" fps="25" width="$once{parent.width}" height="$once{parent.height}" picturequality="0.8"/>
				<microphone id="mic" capturing="true"/>
			</videoview>
		</view>
	</window>
			
</canvas>